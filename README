What is XQuery?

XQuery is a language to process XML, defined by the World-Wide Web
Consortium (W3C), under the XML activity. XQuery, which includes XPath
as a subset, allows users to access, transform, and generate XML. It
includes supports for SQL-like queries over XML data. It is a
functional language, with an extensive built-in function library, and
the ability for users to define their own functions and libraries.

What is Galax?

Galax is an implementation of XQuery designed with the following goals
in mind: completeness, conformance, performance, and
extensibility. Galax is open-source, and has been used on a large
variety of real-life XML applications. Galax relies on a formally
specified and open architecture which is particularly well suited for
users interested in teaching XQuery, or in experimenting with
extensions of the language or optimizations.

Here is a list of the main Galax features.

* Galax implements the Second Edition of the XQuery 1.0
  recommendation, dated December 14, 2010.
* Galax supports Minimal Conformance, as well as the following
  optional features: Static Typing, Full Axis, Module, and
  Serialization.
* Galax supports Unicode, with native support for the UTF-8 and
  ISO-8859-1 character encodings.
* Galax is portable and runs on most modern platforms.
* Galax includes a command-line interface, APIs for OCaml, C, and
  Java, and a simple Web-based interface.
* Galax includes partial support for the Schema Import and Schema
  Validation optional features. Unimplemented features of XML Schema
  include simple types facets and derivation by extension and
  restriction on complex types.
* Galax supports the XQuery 1.0 Update Facility
* Galax supports the XQueryP scripting extension for XQuery

Alpha features:

The following features are experimental.

* Galax inludes support for SOAP and WSDL-based Web Services
  invocation;
* Galax inludes support for Distributed XQuery development;
* Galax's compiler includes an optimizer that supports state of
  the art database and programming language optimization, including:
  * type-based optimizations, notably eliminating unnecessary type
    matching or casting operations and turning dynamic dispatch into
    static dispatch for comparison and arithmetic operators;
  * tail-recursion optimization;
  * join and query unnesting optimizations, including physical
    support for XQuery-specific hash and sort join algorithms;
  * tree-pattern detection in query plans and physical support for
    the TwigJoin and StaircaseJoin algorithms;
  * generation of hybrid streamed/materialized query plans.
* Galax has an extensible data model interface. This allows
  users to provide their own implementation of the XML data
  model. This can be used to support e.g., XML queries over legacy
  data.

Changes since the last version

The following lists the main changes included with this version.

* Environment:
  * Builds on OCaml 3.12, and recent libraries.
  * Switched to XQuery test suite version 1.0.3.
* Performance:
  * Improvements to streaming namespace resolution.
  * More aggressive rewrites of E1[E2] when E2 is a numeric value.
* Bug fixes:
  * Parsing:
    * '\\013' characters now get properly normalized to new lines.
    * processing instructions kind-test verifies it is a proper NCName.
    * default axis for attribute() and schema-attribute() kind tests
    is attribute.
    * default typeswitch clause with a variable parses properly.
  * Semantics:
    * leading '/' checks for document node.
    * following/preceding sibling axis on attribute nodes is empty.

Detailed installation instructions are provided in INSTALL.

How to use Galax

The Galax processor offers the following user interfaces:

* Command-line.
* Application-programming interfaces (APIs) for OCaml, C, or Java.
* Web interface.

Using Galax from the command line

A number of stand-alone command-line tools are provided with the Galax
distribution. Assuming the Galax distribution is intalled in
\verb+$GALAXHOME+, and that Galax executables are reachable from your
\verb+$PATH+ environment variable, The following examples show how to
use the main command-line tools.

* The main XQuery interpreter (glx xquery) is
  the simplest way to use Galax. For instance, the following commands:

    % echo "<two>{ 1+1 }</two>" > test.xq
    % glx xquery test.xq
    <two>2</two>

evaluates the query <two>{ 1+1 }</two> and prints the XML
result <two>2</two>.

* The Galax XML parser and XML Schema validator can be
  called as a standalone tool. For instance, the following command
  validates the document in hispo.xml against the schema in
  hispo.xsd:

    % glx xml -validate -xmlschema $GALAXHOME/examples/docs/hispo.xsd \
                               $GALAXHOME/examples/docs/hispo.xml 

* glx xmlschema is a stand-alone tool that maps XML Schema documents
  into the XQuery type system. This tool is useful for checking whether
  Galax recognizes all the constructs in your XML Schema. It also
  eliminates a lot of the "noise" in XML Schema's XML syntax. 

  For instance, this command will print out the XQuery type
  representation of the schema in hispo.xsd: 

    % glx xmlschema $GALAXHOME/examples/docs/hispo.xsd 

Language API's

Galax supports APIs for OCaml, C, and Java.  See the documentation
for how to use the APIs.
  
If you have installed the binary distribution of Galax, all three APIs
are available.

If you have intalled the source distribution of Galax, you will need
to select the language(s) for which you need API support at
configuration time. See INSTALL for details on
compiling Galax from source.

Examples of how to use Galax's APIs can be found in the following
directories:

  examples/caml_api/
  examples/c_api/
  examples/java_api/
